{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["basicFetch","endpoint","a","fetch","req","json","response","getHomeList","getMovieInfo","movieId","type","title","items","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","slug","randomChosen","floor","random","chosen","chosenInfo","console","log","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae55b49f.chunk.js","sourcesContent":["const API_BASE = 'https://tmdb-server-proxy.herokuapp.com/api'\n\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`)\n    const json = await req.json()\n    return json.response\n}\n\nexport default {\n\n    getHomeList: async () => {\n        return await basicFetch('/home-list')\n    },\n\n    getMovieInfo: async (movieId, type) => {\n        return await basicFetch(`/movie-info?movieId=${movieId}&type=${type}`)\n    }\n}","import React, {useState} from 'react'\nimport './MovieRow.css'\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({ title, items }) => {\n\n    const [scrollX, setScrollX] = useState(0)\n\n    const handleLeftArrow  = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2)\n        if(x > 0) {\n            x = 0\n        }\n        setScrollX(x)\n    }\n\n    const handleRightArrow  = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2)\n        let listW = items.results.length * 150\n        if((window.innerWidth - listW) > x) {\n            x = (window.innerWidth - listW) - 60\n        }\n        setScrollX(x)\n    }\n\n    return (\n        <div className='movieRow'>\n            <h2>{title}</h2>\n            <div className='movieRow--left' onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\n            </div>\n            <div className='movieRow--right' onClick={handleRightArrow}>\n                <NavigateNextIcon style={{ fontSize: 50 }} />\n            </div>\n            <div className='movieRow--listarea'>\n                <div className='movieRow--list' style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className='movieRow--item'>\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    )\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './FeaturedMovie.css'\n\nexport default ({ item }) => {\n\n    let firstDate = new Date(item.first_air_date)\n    let genres = []\n    for (let i in item.genres) {\n        genres.push(item.genres[i].name)\n    }\n\n    let description = item.overview\n    if(description.length > 200) {\n        description = description.substring(0, 200) + '...'\n    }\n    \n    return (\n        <section className='featured' style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className='featured--vertical'>\n                <div className='featured--horizontal'>\n                    <div className='featured--name'>{item.original_name}</div>\n                    <div className='featured--info'>\n                        <div className='featured--points'>{item.vote_average} pontos</div>\n                        <div className='featured--year'>{firstDate.getFullYear()}</div>\n                        <div className='featured--seasons'>{item.number_of_seasons} temporada{item.number_of_seasons > 1 ? 's' : ''}</div>\n                    </div>\n                    <div className='featured--description'>{description}</div>\n                    <div className='featured--buttons'>\n                        <a href={`/watch/${item.id}`} className='featured--watchbutton'>Assisitir</a>\n                        <a href={`/list/add/${item.id}`} className='featured--mylistbutton'>+ minha lista</a>\n                    </div>\n                    <div className='featured--genres'><strong>GÃªneros:</strong> {genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React from 'react';\nimport './Header.css'\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : ''}>\n            <div className='header--logo'>\n                <a href='/'>\n                    <img src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg' alt='netflix' />\n                </a>\n            </div>\n\n            <div className='header--user'>\n                <a href='/'>\n                    <img src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png' alt='user'/>\n                </a>\n            </div>\n        </header>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport Tmdb from './Tmdb'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovie from './components/FeaturedMovie'\nimport Header from './components/Header'\nimport './App.css'\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([])\n  const [featuredData, setFeaturedData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(() => {\n\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList()\n      setMovieList(list)\n\n      let originals = list.filter(item => item.slug === 'originals')\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeaturedData(chosenInfo)\n      console.log(chosenInfo)\n    }\n\n    loadAll()\n  }, [])\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true)\n      } else {\n        setBlackHeader(false)\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener)\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n\n\n  return (\n    <div className='page'>\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className='lists'>\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito com <span role='img' aria-label='coraÃ§Ã£o'>â¥</span> por Carlos AndrÃ©<br />\n        Desenvolvido com base no <a href='https://www.youtube.com/watch?v=tBweoUiMsDg&t=7258s' target='_blank'>tutorial de Bonieky Lacerda</a><br />\n        Direitos de imagem para Netflix <br />\n        Dados pegos do <a href='https://www.themoviedb.org/' target='_blank'>Themoviedb.org</a> <br />\n      </footer>\n\n\n      {movieList <= 0 &&\n        <div className='loading'>\n          <img src='https://c.tenor.com/NerN41mjgV0AAAAC/netflix-intro.gif' alt='Carregando' />\n        </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}